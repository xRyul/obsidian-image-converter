import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs";

// Read version from package.json
const packageJson = JSON.parse(fs.readFileSync("./package.json", "utf8"));

// Read target from tsconfig.json to keep esbuild and TS in sync
// Note: tsconfig.json may contain comments, so we'll strip them before parsing
const tsconfigContent = fs.readFileSync("./tsconfig.json", "utf8")
	.replace(/\/\*[\s\S]*?\*\//g, '') // Remove /* */ comments
	.replace(/\/\/.*$/gm, ''); // Remove // comments
const tsconfig = JSON.parse(tsconfigContent);
const tsTarget = (tsconfig?.compilerOptions?.target ?? "ES2020").toLowerCase();

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
Image Converter Plugin v${packageJson.version}
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

// Build configuration optimized for Obsidian Image Converter Plugin
const buildConfig = {
	banner: {
		js: banner,
	},
	entryPoints: ["./src/main.ts"],
	bundle: true,
	external: [
		// Obsidian and Electron APIs
		"obsidian",
		"electron",
		// CodeMirror (provided by Obsidian)
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		// Node.js built-in modules
		...builtins,
	],
	format: "cjs",

	// Target derived from tsconfig.json
	target: tsTarget,

	logLevel: prod ? "error" : "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,

	// Minification strategy for production
	minify: prod,
	minifyWhitespace: prod,
	minifyIdentifiers: prod,
	minifySyntax: prod,

	// Debugging aids
	keepNames: !prod,

	// Production optimizations
	drop: prod ? ["debugger"] : [],

	outfile: "build/main.js",
	platform: "node",
	tsconfig: "tsconfig.json", // Make esbuild pick up paths and TS settings consistently

	// Required by UTIF.js library
	define: {
		"process.env.NODE_ENV": prod ? '"production"' : '"development"',
	},

	metafile: false, // Disabled as per user request
};

// Helper function to copy files to build
async function copyToBuild() {
	// Ensure build directory exists
	if (!fs.existsSync('build')) {
		fs.mkdirSync('build');
	}
	
	// Copy manifest.json
	if (fs.existsSync('manifest.json')) {
		fs.copyFileSync('manifest.json', 'build/manifest.json');
	}
	
	// Copy styles.css if it exists
	if (fs.existsSync('styles.css')) {
		fs.copyFileSync('styles.css', 'build/styles.css');
	}
}

// Create build context
const context = await esbuild.context(buildConfig);


if (prod) {
	try {
		console.log("\n🚀 Building Image Converter Plugin...");
		console.log(`📌 Version: ${packageJson.version}`);
		
		await context.rebuild();
		
		// Copy additional files to build
		await copyToBuild();
		
		// Meta file generation removed as per user request
		
		console.log("✅ Production build completed in build/\n");
		
		await context.dispose();
		process.exit(0);
	} catch (error) {
		console.error("\n❌ Build failed:", error.message);
		await context.dispose();
		process.exit(1);
	}
} else {
	// Development mode with file watching
	try {
		await context.watch();
		
		// Copy files to build in dev mode too
		await copyToBuild();
		
		console.log("\n🖼️  Image Converter Plugin - Development Mode");
		console.log("=".repeat(50));
		console.log("📌 Version:    " + packageJson.version);
		console.log("🎯 Target:     " + tsTarget.toUpperCase());
		console.log("📁 Entry:      ./src/main.ts");
		console.log("📤 Output:     ./build/");
		console.log("\n👀 Watching for changes... (Ctrl+C to stop)\n");
		
		// Handle graceful shutdown
		process.on('SIGINT', async () => {
			console.log("\n🛑 Stopping development server...");
			await context.dispose();
			process.exit(0);
		});
	} catch (error) {
		console.error("❌ Failed to start development mode:", error);
		process.exit(1);
	}
}
